/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

class Car {
    constructor() {
        this._currentSpeed = 0;
        this.speedObservers = [];
    }

    subscribeSpeedObserver(observer) {
        if(observer.notify) {
            this.speedObservers.push(observer);
        }
        else {
            throw new Error("Invalid observer. notify implementation missing");
        }
    }

    unsubscribeSpeedObserver(observer) {
        let index = this.speedObservers.indexOf(observer);
        if(index > 0) {
            this.speedObservers.splice(index, 0);
        }
    }

    notifySpeedObservers(newVal, oldVal) {
        for(let observer of this.speedObservers) {
            observer.notify(newVal, oldVal);
        }
    }

    get currentSpeed() {
        return this._currentSpeed;
    }

    set currentSpeed(value) {
        let oldVal = this._currentSpeed;
        this._currentSpeed = value;
        if(this._currentSpeed != oldVal) {
            this.notifySpeedObservers(this._currentSpeed, oldVal);
        }
    }
}


class CurrentSpeedConsoleObserver {
    notify(newVal, oldVal) {
        console.log(`Current Speed changed from ${oldVal} to ${newVal}`);
    }
}

class DOMCarSpeedObserver {
    constructor(selector) {
        this.textField = document.querySelector(selector);
    }

    notify(newVal, oldVal) {
        this.textField.textContent = newVal;
    }
}

let car = new Car();
let consoleObserver = new CurrentSpeedConsoleObserver();
let domObserver = new DOMCarSpeedObserver("#speedometer");
car.subscribeSpeedObserver(consoleObserver);
car.subscribeSpeedObserver(domObserver);

let interval = setInterval(() => {
    car.currentSpeed += 10;
}, 2000);

setTimeout(() => {
    clearInterval(interval);
}, 10000);

/***/ })
/******/ ]);